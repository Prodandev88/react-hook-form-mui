{"version":3,"file":"TextareaAutosizeElement.stories-daa492a4.js","sources":["../../../../packages/rhf-mui/src/TextareaAutosizeElement.tsx"],"sourcesContent":["import {TextareaAutosize, TextField, TextFieldProps} from '@mui/material'\nimport {\n  Control,\n  Controller,\n  ControllerProps,\n  FieldError,\n  Path,\n} from 'react-hook-form'\nimport {FieldValues} from 'react-hook-form/dist/types/fields'\nimport {CSSProperties} from 'react'\nimport {useFormError} from './FormErrorProvider'\n\nexport type TextareaAutosizeElementProps<T extends FieldValues = FieldValues> =\n  Omit<TextFieldProps, 'name' | 'type'> & {\n    validation?: ControllerProps['rules']\n    name: Path<T>\n    parseError?: (error: FieldError) => string\n    control?: Control<T>\n    resizeStyle?: CSSProperties['resize']\n  }\n\nexport default function TextareaAutosizeElement<\n  TFieldValues extends FieldValues = FieldValues\n>({\n  validation = {},\n  parseError,\n  required,\n  name,\n  control,\n  rows,\n  resizeStyle,\n  ...rest\n}: TextareaAutosizeElementProps<TFieldValues>): JSX.Element {\n  const errorMsgFn = useFormError()\n  const customErrorFn = parseError || errorMsgFn\n  if (required && !validation.required) {\n    validation.required = 'This field is required'\n  }\n\n  return (\n    <Controller\n      name={name}\n      control={control}\n      rules={validation}\n      render={({\n        field: {value, onChange, onBlur, ref},\n        fieldState: {error},\n      }) => (\n        <TextField\n          {...rest}\n          name={name}\n          value={value ?? ''}\n          onChange={(ev) => {\n            onChange(ev.target.value)\n            if (typeof rest.onChange === 'function') {\n              rest.onChange(ev)\n            }\n          }}\n          onBlur={onBlur}\n          required={required}\n          error={!!error}\n          helperText={\n            error\n              ? typeof customErrorFn === 'function'\n                ? customErrorFn(error)\n                : error.message\n              : rest.helperText\n          }\n          inputRef={ref}\n          multiline\n          InputProps={{\n            inputComponent: TextareaAutosize,\n            inputProps: {\n              minRows: rows,\n              style: {\n                resize: resizeStyle || 'both',\n              },\n            },\n          }}\n        />\n      )}\n    />\n  )\n}\n"],"names":["TextareaAutosizeElement","validation","parseError","required","name","control","rows","resizeStyle","rest","errorMsgFn","useFormError","customErrorFn","jsx","Controller","value","onChange","onBlur","ref","error","TextField","ev","TextareaAutosize"],"mappings":"ktBAqBA,SAAwBA,EAEtB,CACA,WAAAC,EAAa,CAAC,EACd,WAAAC,EACA,SAAAC,EACA,KAAAC,EACA,QAAAC,EACA,KAAAC,EACA,YAAAC,EACA,GAAGC,CACL,EAA4D,CAC1D,MAAMC,EAAaC,IACbC,EAAgBT,GAAcO,EAChC,OAAAN,GAAY,CAACF,EAAW,WAC1BA,EAAW,SAAW,0BAItBW,EAACC,EAAA,CACC,KAAAT,EACA,QAAAC,EACA,MAAOJ,EACP,OAAQ,CAAC,CACP,MAAO,CAAC,MAAAa,EAAO,SAAAC,EAAU,OAAAC,EAAQ,IAAAC,CAAG,EACpC,WAAY,CAAC,MAAAC,CAAK,CAAA,IAElBN,EAACO,EAAA,CACE,GAAGX,EACJ,KAAAJ,EACA,MAAOU,GAAS,GAChB,SAAWM,GAAO,CACPL,EAAAK,EAAG,OAAO,KAAK,EACpB,OAAOZ,EAAK,UAAa,YAC3BA,EAAK,SAASY,CAAE,CAEpB,EACA,OAAAJ,EACA,SAAAb,EACA,MAAO,CAAC,CAACe,EACT,WACEA,EACI,OAAOP,GAAkB,WACvBA,EAAcO,CAAK,EACnBA,EAAM,QACRV,EAAK,WAEX,SAAUS,EACV,UAAS,GACT,WAAY,CACV,eAAgBI,EAChB,WAAY,CACV,QAASf,EACT,MAAO,CACL,OAAQC,GAAe,MACzB,CACF,CACF,CAAA,CACF,CAAA,CAAA,CAIR;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}