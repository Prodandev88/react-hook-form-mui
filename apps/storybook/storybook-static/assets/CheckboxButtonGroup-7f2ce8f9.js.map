{"version":3,"file":"CheckboxButtonGroup-7f2ce8f9.js","sources":["../../../../packages/rhf-mui/src/CheckboxButtonGroup.tsx"],"sourcesContent":["import {\n  Checkbox,\n  CheckboxProps,\n  FormControl,\n  FormControlLabel,\n  FormControlLabelProps,\n  FormGroup,\n  FormHelperText,\n  FormLabel,\n  useTheme,\n} from '@mui/material'\nimport {\n  Control,\n  ControllerProps,\n  FieldError,\n  Path,\n  useController,\n} from 'react-hook-form'\nimport {FieldValues} from 'react-hook-form/dist/types/fields'\nimport {useFormError} from './FormErrorProvider'\n\nexport type CheckboxButtonGroupProps<T extends FieldValues> = {\n  options: {id: string | number; label: string}[] | any[]\n  helperText?: string\n  name: Path<T>\n  required?: boolean\n  parseError?: (error: FieldError) => string\n  label?: string\n  labelKey?: string\n  valueKey?: string\n  onChange?: (data: any) => void\n  returnObject?: boolean\n  disabled?: boolean\n  row?: boolean\n  control?: Control<T>\n  rules?: ControllerProps['rules']\n  checkboxColor?: CheckboxProps['color']\n  labelProps?: Omit<FormControlLabelProps, 'label' | 'control'>\n}\n\nexport default function CheckboxButtonGroup<TFieldValues extends FieldValues>({\n  helperText,\n  options,\n  label,\n  name,\n  parseError,\n  required,\n  labelKey = 'label',\n  valueKey = 'id',\n  returnObject,\n  disabled,\n  row,\n  control,\n  checkboxColor,\n  rules,\n  labelProps,\n  ...rest\n}: CheckboxButtonGroupProps<TFieldValues>): JSX.Element {\n  const errorMsgFn = useFormError()\n  const customErrorFn = parseError || errorMsgFn\n  const theme = useTheme()\n  const {\n    field: {value = [], onChange},\n    fieldState: {error},\n  } = useController({\n    name,\n    rules: required ? {required: 'This field is required'} : rules,\n    control,\n  })\n\n  helperText = error\n    ? typeof customErrorFn === 'function'\n      ? customErrorFn(error)\n      : error.message\n    : helperText\n\n  const handleChange = (index: number | string) => {\n    const newArray: (string | number)[] | any[] = [...value]\n    const exists =\n      value.findIndex((i: any) =>\n        returnObject ? i[valueKey] === index : i === index\n      ) === -1\n    if (exists) {\n      newArray.push(\n        returnObject ? options.find((i) => i[valueKey] === index) : index\n      )\n    } else {\n      newArray.splice(\n        value.findIndex((i: any) =>\n          returnObject ? i[valueKey] === index : i === index\n        ),\n        1\n      )\n    }\n    // setValue(name, newArray, { shouldValidate: true })\n    onChange(newArray)\n    if (typeof rest.onChange === 'function') {\n      rest.onChange(newArray)\n    }\n  }\n\n  return (\n    <FormControl error={!!error} required={required}>\n      {label && <FormLabel error={!!error}>{label}</FormLabel>}\n      <FormGroup row={row}>\n        {options.map((option: any) => {\n          const optionKey = option[valueKey]\n          if (!optionKey) {\n            console.error(\n              `CheckboxButtonGroup: valueKey ${valueKey} does not exist on option`,\n              option\n            )\n          }\n          const isChecked =\n            value.findIndex((item: any) =>\n              returnObject ? item[valueKey] === optionKey : item === optionKey\n            ) !== -1\n          return (\n            <FormControlLabel\n              {...labelProps}\n              control={\n                <Checkbox\n                  sx={{\n                    color: error ? theme.palette.error.main : undefined,\n                  }}\n                  color={checkboxColor || 'primary'}\n                  value={optionKey}\n                  checked={isChecked}\n                  disabled={disabled}\n                  onChange={() => handleChange(optionKey)}\n                />\n              }\n              label={option[labelKey]}\n              key={optionKey}\n            />\n          )\n        })}\n      </FormGroup>\n      {helperText && <FormHelperText>{helperText}</FormHelperText>}\n    </FormControl>\n  )\n}\n"],"names":["CheckboxButtonGroup","helperText","options","label","name","parseError","required","labelKey","valueKey","returnObject","disabled","row","control","checkboxColor","rules","labelProps","rest","errorMsgFn","useFormError","customErrorFn","theme","useTheme","value","onChange","error","useController","handleChange","index","newArray","i","FormControl","FormLabel","FormGroup","option","optionKey","isChecked","item","createElement","FormControlLabel","jsx","Checkbox","FormHelperText"],"mappings":"waAwCA,SAAwBA,EAAsD,CAC5E,WAAAC,EACA,QAAAC,EACA,MAAAC,EACA,KAAAC,EACA,WAAAC,EACA,SAAAC,EACA,SAAAC,EAAW,QACX,SAAAC,EAAW,KACX,aAAAC,EACA,SAAAC,EACA,IAAAC,EACA,QAAAC,EACA,cAAAC,EACA,MAAAC,EACA,WAAAC,EACA,GAAGC,CACL,EAAwD,CACtD,MAAMC,EAAaC,IACbC,EAAgBd,GAAcY,EAC9BG,EAAQC,IACR,CACJ,MAAO,CAAC,MAAAC,EAAQ,GAAI,SAAAC,CAAQ,EAC5B,WAAY,CAAC,MAAAC,CAAK,GAChBC,EAAc,CAChB,KAAArB,EACA,MAAOE,EAAW,CAAC,SAAU,wBAA4B,EAAAQ,EACzD,QAAAF,CAAA,CACD,EAEYX,EAAAuB,EACT,OAAOL,GAAkB,WACvBA,EAAcK,CAAK,EACnBA,EAAM,QACRvB,EAEE,MAAAyB,EAAgBC,GAA2B,CACzC,MAAAC,EAAwC,CAAC,GAAGN,CAAK,EAErDA,EAAM,UAAWO,GACfpB,EAAeoB,EAAErB,CAAQ,IAAMmB,EAAQE,IAAMF,CACzC,IAAA,GAEGC,EAAA,KACPnB,EAAeP,EAAQ,KAAM2B,GAAMA,EAAErB,CAAQ,IAAMmB,CAAK,EAAIA,CAAA,EAGrDC,EAAA,OACPN,EAAM,UAAWO,GACfpB,EAAeoB,EAAErB,CAAQ,IAAMmB,EAAQE,IAAMF,CAC/C,EACA,CAAA,EAIJJ,EAASK,CAAQ,EACb,OAAOZ,EAAK,UAAa,YAC3BA,EAAK,SAASY,CAAQ,CACxB,EAGF,SACGE,EAAY,CAAA,MAAO,CAAC,CAACN,EAAO,SAAAlB,EAC1B,SAAA,CAAAH,KAAU4B,EAAU,CAAA,MAAO,CAAC,CAACP,EAAQ,SAAMrB,EAAA,IAC3C6B,EAAU,CAAA,IAAArB,EACR,SAAQT,EAAA,IAAK+B,GAAgB,CACtB,MAAAC,EAAYD,EAAOzB,CAAQ,EAC5B0B,GACK,QAAA,MACN,iCAAiC1B,6BACjCyB,CAAA,EAGJ,MAAME,EACJb,EAAM,UAAWc,GACf3B,EAAe2B,EAAK5B,CAAQ,IAAM0B,EAAYE,IAASF,CACnD,IAAA,GAEN,OAAAG,EAAA,cAACC,EAAA,CACE,GAAGvB,EACJ,QACEwB,EAACC,EAAA,CACC,GAAI,CACF,MAAOhB,EAAQJ,EAAM,QAAQ,MAAM,KAAO,MAC5C,EACA,MAAOP,GAAiB,UACxB,MAAOqB,EACP,QAASC,EACT,SAAAzB,EACA,SAAU,IAAMgB,EAAaQ,CAAS,CAAA,CACxC,EAEF,MAAOD,EAAO1B,CAAQ,EACtB,IAAK2B,CAAA,CAAA,CAGV,CAAA,EACH,EACCjC,GAAesC,EAAAE,EAAA,CAAgB,SAAWxC,CAAA,CAAA,CAC7C,CAAA,CAAA,CAEJ"}